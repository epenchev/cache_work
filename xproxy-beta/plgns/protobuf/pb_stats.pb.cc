// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pb_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb_stats {

namespace {

const ::google::protobuf::Descriptor* StatEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pb_5fstats_2eproto() {
  protobuf_AddDesc_pb_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pb_stats.proto");
  GOOGLE_CHECK(file != NULL);
  StatEntry_descriptor_ = file->message_type(0);
  static const int StatEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, bytes_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, bytes_miss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, reqs_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, reqs_miss_),
  };
  StatEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatEntry_descriptor_,
      StatEntry::default_instance_,
      StatEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatEntry));
  Stats_descriptor_ = file->message_type(1);
  static const int Stats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, data_),
  };
  Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stats));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pb_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatEntry_descriptor_, &StatEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stats_descriptor_, &Stats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pb_5fstats_2eproto() {
  delete StatEntry::default_instance_;
  delete StatEntry_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
}

void protobuf_AddDesc_pb_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016pb_stats.proto\022\010pb_stats\"e\n\tStatEntry\022"
    "\014\n\004host\030\001 \002(\014\022\021\n\tbytes_hit\030\002 \002(\003\022\022\n\nbyte"
    "s_miss\030\003 \002(\003\022\020\n\010reqs_hit\030\004 \002(\005\022\021\n\treqs_m"
    "iss\030\005 \002(\005\"*\n\005Stats\022!\n\004data\030\001 \003(\0132\023.pb_st"
    "ats.StatEntry", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pb_stats.proto", &protobuf_RegisterTypes);
  StatEntry::default_instance_ = new StatEntry();
  Stats::default_instance_ = new Stats();
  StatEntry::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pb_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pb_5fstats_2eproto {
  StaticDescriptorInitializer_pb_5fstats_2eproto() {
    protobuf_AddDesc_pb_5fstats_2eproto();
  }
} static_descriptor_initializer_pb_5fstats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StatEntry::kHostFieldNumber;
const int StatEntry::kBytesHitFieldNumber;
const int StatEntry::kBytesMissFieldNumber;
const int StatEntry::kReqsHitFieldNumber;
const int StatEntry::kReqsMissFieldNumber;
#endif  // !_MSC_VER

StatEntry::StatEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_stats.StatEntry)
}

void StatEntry::InitAsDefaultInstance() {
}

StatEntry::StatEntry(const StatEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_stats.StatEntry)
}

void StatEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_hit_ = GOOGLE_LONGLONG(0);
  bytes_miss_ = GOOGLE_LONGLONG(0);
  reqs_hit_ = 0;
  reqs_miss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatEntry::~StatEntry() {
  // @@protoc_insertion_point(destructor:pb_stats.StatEntry)
  SharedDtor();
}

void StatEntry::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void StatEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatEntry_descriptor_;
}

const StatEntry& StatEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fstats_2eproto();
  return *default_instance_;
}

StatEntry* StatEntry::default_instance_ = NULL;

StatEntry* StatEntry::New() const {
  return new StatEntry;
}

void StatEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bytes_hit_, reqs_miss_);
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_stats.StatEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bytes_hit;
        break;
      }

      // required int64 bytes_hit = 2;
      case 2: {
        if (tag == 16) {
         parse_bytes_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_hit_)));
          set_has_bytes_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytes_miss;
        break;
      }

      // required int64 bytes_miss = 3;
      case 3: {
        if (tag == 24) {
         parse_bytes_miss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_miss_)));
          set_has_bytes_miss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reqs_hit;
        break;
      }

      // required int32 reqs_hit = 4;
      case 4: {
        if (tag == 32) {
         parse_reqs_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqs_hit_)));
          set_has_reqs_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reqs_miss;
        break;
      }

      // required int32 reqs_miss = 5;
      case 5: {
        if (tag == 40) {
         parse_reqs_miss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqs_miss_)));
          set_has_reqs_miss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_stats.StatEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_stats.StatEntry)
  return false;
#undef DO_
}

void StatEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_stats.StatEntry)
  // required bytes host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->host(), output);
  }

  // required int64 bytes_hit = 2;
  if (has_bytes_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes_hit(), output);
  }

  // required int64 bytes_miss = 3;
  if (has_bytes_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bytes_miss(), output);
  }

  // required int32 reqs_hit = 4;
  if (has_reqs_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reqs_hit(), output);
  }

  // required int32 reqs_miss = 5;
  if (has_reqs_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reqs_miss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_stats.StatEntry)
}

::google::protobuf::uint8* StatEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_stats.StatEntry)
  // required bytes host = 1;
  if (has_host()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->host(), target);
  }

  // required int64 bytes_hit = 2;
  if (has_bytes_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes_hit(), target);
  }

  // required int64 bytes_miss = 3;
  if (has_bytes_miss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bytes_miss(), target);
  }

  // required int32 reqs_hit = 4;
  if (has_reqs_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reqs_hit(), target);
  }

  // required int32 reqs_miss = 5;
  if (has_reqs_miss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reqs_miss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_stats.StatEntry)
  return target;
}

int StatEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->host());
    }

    // required int64 bytes_hit = 2;
    if (has_bytes_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes_hit());
    }

    // required int64 bytes_miss = 3;
    if (has_bytes_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes_miss());
    }

    // required int32 reqs_hit = 4;
    if (has_reqs_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqs_hit());
    }

    // required int32 reqs_miss = 5;
    if (has_reqs_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqs_miss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatEntry::MergeFrom(const StatEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_bytes_hit()) {
      set_bytes_hit(from.bytes_hit());
    }
    if (from.has_bytes_miss()) {
      set_bytes_miss(from.bytes_miss());
    }
    if (from.has_reqs_hit()) {
      set_reqs_hit(from.reqs_hit());
    }
    if (from.has_reqs_miss()) {
      set_reqs_miss(from.reqs_miss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatEntry::CopyFrom(const StatEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void StatEntry::Swap(StatEntry* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(bytes_hit_, other->bytes_hit_);
    std::swap(bytes_miss_, other->bytes_miss_);
    std::swap(reqs_hit_, other->reqs_hit_);
    std::swap(reqs_miss_, other->reqs_miss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatEntry_descriptor_;
  metadata.reflection = StatEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stats::kDataFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb_stats.Stats)
}

void Stats::InitAsDefaultInstance() {
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb_stats.Stats)
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:pb_stats.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pb_5fstats_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New() const {
  return new Stats;
}

void Stats::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb_stats.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb_stats.StatEntry data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb_stats.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb_stats.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb_stats.Stats)
  // repeated .pb_stats.StatEntry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb_stats.Stats)
}

::google::protobuf::uint8* Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_stats.Stats)
  // repeated .pb_stats.StatEntry data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_stats.Stats)
  return target;
}

int Stats::ByteSize() const {
  int total_size = 0;

  // repeated .pb_stats.StatEntry data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void Stats::Swap(Stats* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_stats

// @@protoc_insertion_point(global_scope)
